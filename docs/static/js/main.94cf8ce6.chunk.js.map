{"version":3,"sources":["navigator/Navigator.module.css","app/AppContext.js","navigator/Navigator.js","text-view/TextView.js","prompt-password/PromptPassword.js","loading-bar/LoadingBar.js","app/App.js","serviceWorker.js","index.js","text-view/TextView.module.css","navigator/arrow.svg","loading-bar/LoadingBar.module.css","prompt-password/PromptPassword.module.css"],"names":["module","exports","defaultAppState","password","letter","_id","styles","fontSize","backgroundColor","color","marginLeft","marginRight","textAlign","text","createdAt","loading","hasNext","currentPage","AppContext","createContext","Navigator","getNavigationButtonClass","control","cls","classes","NavigationButton","NavigationButtonDisabled","this","props","hasPrev","context","goNextPage","goPrevPage","console","log","className","NavigatorContainer","src","arrow","alt","onClick","nothing","title","getPrevText","getNextText","Component","contextType","convertToMMNumber","number","numberMap","map","n","join","TextView","_styles","colorStyles","date","day","Date","getDate","month","getMonth","year","getFullYear","getStyles","style","DateText","getMMDate","Text","source","escapeHtml","PromptPassword","state","placeholder","type","value","onChange","e","setState","target","onEnter","LoadingBar","Meter","Progress","App","document","cookie","split","key","prevProps","prevState","snapshot","getLetter","then","updateLetterState","bind","url","process","http","validateStatus","status","params","limit","skip","headers","Authorization","res","letters","data","JSON","parse","pivot","provide","changeCurrentPage","Provider","updatePassword","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94cf8ce6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigatorContainer\":\"Navigator_NavigatorContainer__wXphv\",\"Navigator\":\"Navigator_Navigator__GDUY-\",\"NavigationButton\":\"Navigator_NavigationButton__vUDaJ\",\"NavigationButtonDisabled\":\"Navigator_NavigationButtonDisabled__CJN-h\"};","import {createContext} from \"react\";\n\nexport const defaultAppState = {\n    password: '',\n    letter: {\n        _id: '',\n        styles: {\n            fontSize: 24,\n            backgroundColor: '#fff',\n            color: '#fff',\n            marginLeft: 52,\n            marginRight: 52,\n            textAlign: 'center'\n        },\n        text: '',\n        createdAt: 0,\n        loading: true\n    },\n    hasNext: false,\n    currentPage: 0\n}\n\nexport const AppContext = createContext(null)\n","import React, {Component} from \"react\";\nimport PropTypes from 'prop-types'\nimport classes from './Navigator.module.css'\nimport cls from 'clsx'\nimport arrow from './arrow.svg'\nimport {AppContext} from \"../app/AppContext\";\n\n\nexport class Navigator extends Component {\n    static contextType = AppContext\n\n    getNavigationButtonClass = (control) => cls(classes.NavigationButton, {\n        [classes.NavigationButtonDisabled]: !control\n    })\n\n    getPrevText() {\n        return this.props.hasPrev ? \"နောက်သို့\" : \"\"\n    }\n\n    getNextText() {\n        return this.props.hasNext ? \"ရှေ့သို့\" : \"\"\n    }\n\n    nothing() {}\n\n    render() {\n        let {loading, hasNext, currentPage, goNextPage, goPrevPage} = this.context\n        const hasPrev = !loading && currentPage !== 0\n        hasNext = !loading && hasNext\n\n        console.log('loading', loading)\n\n        return (\n            <div className={classes.NavigatorContainer} >\n                <div className={classes.Navigator} >\n                    <img src={arrow}\n                         alt=\"\"\n                         onClick={hasPrev ? goPrevPage : this.nothing}\n                         className={this.getNavigationButtonClass(hasPrev)}\n                         title={this.getPrevText()}/>\n                    <img src={arrow}\n                         onClick={hasNext ? goNextPage : this.nothing}\n                         alt=\"\"\n                         className={this.getNavigationButtonClass(hasNext)}\n                         title={this.getNextText()}/>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, {Component} from \"react\";\nimport classes from './TextView.module.css'\nimport {Navigator} from \"../navigator/Navigator\";\nimport ReactMarkdown from \"react-markdown\";\nimport {AppContext} from \"../app/AppContext\";\n\nfunction convertToMMNumber(number) {\n    const numberMap = ['၀', '၁', '၂', '၃', '၄', '၅', '၆', '၇', '၈', '၉', '၁၀']\n\n    return [...number+''].map(n => numberMap[n]).join('')\n}\n\nexport class TextView extends Component {\n    static contextType = AppContext\n\n    getStyles() {\n        const {styles} = this.context.letter\n        const _styles = {...styles}\n        const colorStyles = {\n            backgroundColor: styles.backgroundColor,\n            color: styles.color\n        }\n\n        delete _styles.backgroundColor\n        delete _styles.color\n\n        return {styles: _styles, colorStyles}\n    }\n\n    getMMDate(date) {\n        date = new Date(date)\n\n        const day = convertToMMNumber(date.getDate())\n        const month = convertToMMNumber(date.getMonth()+1)\n        const year = convertToMMNumber(date.getFullYear())\n\n        return `${day}ရက် ${month}လ ${year}`\n    }\n\n    render() {\n        const {letter} = this.context\n        const {text, createdAt} = letter\n        const {styles, colorStyles} = this.getStyles()\n\n        return (\n            <div className={classes.TextView} style={colorStyles}>\n                <div className={classes.DateText}>\n                    <span>{this.getMMDate(createdAt)}</span>\n                </div>\n                <div className={classes.Text} style={styles}>\n                    <ReactMarkdown source={text} escapeHtml={false}/>\n                </div>\n                <Navigator />\n            </div>\n        )\n    }\n}\n\n","import React, {Component} from 'react'\nimport classes from './PromptPassword.module.css'\nimport PropTypes from 'prop-types'\n\nexport class PromptPassword extends Component {\n    state = {\n        password: ''\n    }\n\n    render() {\n        return (\n            <div className={classes.PromptPassword}>\n                <input placeholder=\"Password\"\n                       type=\"password\"\n                       value={this.state.password}\n                       onChange={e => this.setState({\n                            password: e.target.value\n                       })} />\n                <button onClick={() => this.props.onEnter(this.state.password)}>Enter</button>\n            </div>\n        )\n    }\n}\n\nPromptPassword.propTypes = {\n    onEnter: PropTypes.func\n}\n","import React, {Component} from \"react\";\nimport classes from './LoadingBar.module.css'\n\nexport class LoadingBar extends Component {\n    render() {\n        return (\n            <div className={classes.Meter}>\n                <span className={classes.Progress} />\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport {TextView} from \"../text-view/TextView\";\nimport  * as http from 'axios'\nimport {defaultAppState, AppContext} from \"./AppContext\";\nimport {PromptPassword} from \"../prompt-password/PromptPassword\";\nimport {LoadingBar} from \"../loading-bar/LoadingBar\";\n\nclass App extends Component {\n    state = defaultAppState\n\n    componentDidMount() {\n        document.cookie.split('; ').map(cookie => {\n            const [key, value] = cookie.split('=')\n\n            if(key === 'password') {\n                this.setState({\n                    ...this.state,\n                    password: value\n                })\n            }\n\n            return []\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.state.loading === true) return\n        if (prevState.password === '') {\n            this.getLetter().then(this.updateLetterState.bind(this))\n        } else if (prevState.currentPage !== this.state.currentPage) {\n            this.getLetter().then(this.updateLetterState.bind(this))\n        }\n    }\n\n    async getLetter() {\n        const url = `${process.env.REACT_APP_API_URL}/letters`\n\n        this.setState({\n            ...this.state,\n            loading: true\n        })\n\n        const res = await http.get(url, {\n            validateStatus: function (status) {\n                return status >= 200 && status <= 401;\n            },\n            params: {\n                limit: 1,\n                skip: this.state.currentPage\n            },\n            headers: {\n                Authorization: this.state.password\n            }\n        })\n\n        if (res.status === 401) {\n            this.setState({\n                ...this.state,\n                password: '',\n                loading: false\n            })\n\n            return {letter: null, hasNext: false}\n        }\n\n        document.cookie = \"password=\" + this.state.password\n\n        const letters = res.data.letters || [null]\n\n        return {letter: letters[0], hasNext: res.data.hasNext}\n    }\n\n    updateLetterState(data) {\n        const {letter, hasNext} = data\n\n        if (!letter) return\n\n        letter.styles = JSON.parse(letter.styles)\n\n        this.setState({\n            ...this.state,\n            letter,\n            hasNext,\n            loading: false\n        })\n    }\n\n    changeCurrentPage(pivot) {\n        this.setState({\n            ...this.state,\n            currentPage: this.state.currentPage + pivot\n        })\n    }\n\n    updatePassword(password) {\n        this.setState({\n            ...this.state,\n            password\n        })\n    }\n\n    render() {\n        const provide = {\n            letter: this.state.letter,\n            hasNext: this.state.hasNext,\n            currentPage: this.state.currentPage,\n            loading: this.state.loading,\n\n            goNextPage: () => this.changeCurrentPage(+1),\n            goPrevPage: () => this.changeCurrentPage(-1)\n        }\n\n        return (\n            <AppContext.Provider value={provide}>\n                {this.state.loading ? <LoadingBar /> : null}\n                {this.state.password === '' ? <PromptPassword onEnter={this.updatePassword.bind(this)} /> : <TextView />}\n            </AppContext.Provider>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextView\":\"TextView_TextView__1pNHD\",\"DateText\":\"TextView_DateText__jrCCg\",\"Text\":\"TextView_Text__3ij-0\"};","module.exports = __webpack_public_path__ + \"static/media/arrow.d12b386f.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Meter\":\"LoadingBar_Meter__3yQmM\",\"Progress\":\"LoadingBar_Progress__26jWa\",\"progressBar\":\"LoadingBar_progressBar__3Z_lD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PromptPassword\":\"PromptPassword_PromptPassword__2QYUZ\"};"],"sourceRoot":""}